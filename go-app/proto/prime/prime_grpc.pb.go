// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: prime/prime.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CheckPrime_CheckPrime_FullMethodName = "/prime.CheckPrime/CheckPrime"
)

// CheckPrimeClient is the client API for CheckPrime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckPrimeClient interface {
	CheckPrime(ctx context.Context, in *IsPrimeRequest, opts ...grpc.CallOption) (*IsPrimeResponse, error)
}

type checkPrimeClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckPrimeClient(cc grpc.ClientConnInterface) CheckPrimeClient {
	return &checkPrimeClient{cc}
}

func (c *checkPrimeClient) CheckPrime(ctx context.Context, in *IsPrimeRequest, opts ...grpc.CallOption) (*IsPrimeResponse, error) {
	out := new(IsPrimeResponse)
	err := c.cc.Invoke(ctx, CheckPrime_CheckPrime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckPrimeServer is the server API for CheckPrime service.
// All implementations must embed UnimplementedCheckPrimeServer
// for forward compatibility
type CheckPrimeServer interface {
	CheckPrime(context.Context, *IsPrimeRequest) (*IsPrimeResponse, error)
	mustEmbedUnimplementedCheckPrimeServer()
}

// UnimplementedCheckPrimeServer must be embedded to have forward compatible implementations.
type UnimplementedCheckPrimeServer struct {
}

func (UnimplementedCheckPrimeServer) CheckPrime(context.Context, *IsPrimeRequest) (*IsPrimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPrime not implemented")
}
func (UnimplementedCheckPrimeServer) mustEmbedUnimplementedCheckPrimeServer() {}

// UnsafeCheckPrimeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckPrimeServer will
// result in compilation errors.
type UnsafeCheckPrimeServer interface {
	mustEmbedUnimplementedCheckPrimeServer()
}

func RegisterCheckPrimeServer(s grpc.ServiceRegistrar, srv CheckPrimeServer) {
	s.RegisterService(&CheckPrime_ServiceDesc, srv)
}

func _CheckPrime_CheckPrime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsPrimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckPrimeServer).CheckPrime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckPrime_CheckPrime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckPrimeServer).CheckPrime(ctx, req.(*IsPrimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckPrime_ServiceDesc is the grpc.ServiceDesc for CheckPrime service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckPrime_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prime.CheckPrime",
	HandlerType: (*CheckPrimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckPrime",
			Handler:    _CheckPrime_CheckPrime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prime/prime.proto",
}
