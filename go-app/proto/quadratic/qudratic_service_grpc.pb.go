// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: quadratic/qudratic_service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuadraticEquationSolver_SolveQuadraticEquation_FullMethodName = "/quadratic.QuadraticEquationSolver/SolveQuadraticEquation"
)

// QuadraticEquationSolverClient is the client API for QuadraticEquationSolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuadraticEquationSolverClient interface {
	SolveQuadraticEquation(ctx context.Context, in *QuadraticEquationRequest, opts ...grpc.CallOption) (*QuadraticEquationResponse, error)
}

type quadraticEquationSolverClient struct {
	cc grpc.ClientConnInterface
}

func NewQuadraticEquationSolverClient(cc grpc.ClientConnInterface) QuadraticEquationSolverClient {
	return &quadraticEquationSolverClient{cc}
}

func (c *quadraticEquationSolverClient) SolveQuadraticEquation(ctx context.Context, in *QuadraticEquationRequest, opts ...grpc.CallOption) (*QuadraticEquationResponse, error) {
	out := new(QuadraticEquationResponse)
	err := c.cc.Invoke(ctx, QuadraticEquationSolver_SolveQuadraticEquation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuadraticEquationSolverServer is the server API for QuadraticEquationSolver service.
// All implementations must embed UnimplementedQuadraticEquationSolverServer
// for forward compatibility
type QuadraticEquationSolverServer interface {
	SolveQuadraticEquation(context.Context, *QuadraticEquationRequest) (*QuadraticEquationResponse, error)
	mustEmbedUnimplementedQuadraticEquationSolverServer()
}

// UnimplementedQuadraticEquationSolverServer must be embedded to have forward compatible implementations.
type UnimplementedQuadraticEquationSolverServer struct {
}

func (UnimplementedQuadraticEquationSolverServer) SolveQuadraticEquation(context.Context, *QuadraticEquationRequest) (*QuadraticEquationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolveQuadraticEquation not implemented")
}
func (UnimplementedQuadraticEquationSolverServer) mustEmbedUnimplementedQuadraticEquationSolverServer() {
}

// UnsafeQuadraticEquationSolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuadraticEquationSolverServer will
// result in compilation errors.
type UnsafeQuadraticEquationSolverServer interface {
	mustEmbedUnimplementedQuadraticEquationSolverServer()
}

func RegisterQuadraticEquationSolverServer(s grpc.ServiceRegistrar, srv QuadraticEquationSolverServer) {
	s.RegisterService(&QuadraticEquationSolver_ServiceDesc, srv)
}

func _QuadraticEquationSolver_SolveQuadraticEquation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuadraticEquationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuadraticEquationSolverServer).SolveQuadraticEquation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuadraticEquationSolver_SolveQuadraticEquation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuadraticEquationSolverServer).SolveQuadraticEquation(ctx, req.(*QuadraticEquationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuadraticEquationSolver_ServiceDesc is the grpc.ServiceDesc for QuadraticEquationSolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuadraticEquationSolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quadratic.QuadraticEquationSolver",
	HandlerType: (*QuadraticEquationSolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SolveQuadraticEquation",
			Handler:    _QuadraticEquationSolver_SolveQuadraticEquation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quadratic/qudratic_service.proto",
}
