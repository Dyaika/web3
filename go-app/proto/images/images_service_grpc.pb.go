// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: images/images_service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImageProcessing_ResizeImage_FullMethodName        = "/images.ImageProcessing/ResizeImage"
	ImageProcessing_ConvertToGrayscale_FullMethodName = "/images.ImageProcessing/ConvertToGrayscale"
)

// ImageProcessingClient is the client API for ImageProcessing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageProcessingClient interface {
	ResizeImage(ctx context.Context, in *ResizeImageRequest, opts ...grpc.CallOption) (*ResizeImageResponse, error)
	ConvertToGrayscale(ctx context.Context, in *ConvertToGrayscaleRequest, opts ...grpc.CallOption) (*ConvertToGrayscaleResponse, error)
}

type imageProcessingClient struct {
	cc grpc.ClientConnInterface
}

func NewImageProcessingClient(cc grpc.ClientConnInterface) ImageProcessingClient {
	return &imageProcessingClient{cc}
}

func (c *imageProcessingClient) ResizeImage(ctx context.Context, in *ResizeImageRequest, opts ...grpc.CallOption) (*ResizeImageResponse, error) {
	out := new(ResizeImageResponse)
	err := c.cc.Invoke(ctx, ImageProcessing_ResizeImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingClient) ConvertToGrayscale(ctx context.Context, in *ConvertToGrayscaleRequest, opts ...grpc.CallOption) (*ConvertToGrayscaleResponse, error) {
	out := new(ConvertToGrayscaleResponse)
	err := c.cc.Invoke(ctx, ImageProcessing_ConvertToGrayscale_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageProcessingServer is the server API for ImageProcessing service.
// All implementations must embed UnimplementedImageProcessingServer
// for forward compatibility
type ImageProcessingServer interface {
	ResizeImage(context.Context, *ResizeImageRequest) (*ResizeImageResponse, error)
	ConvertToGrayscale(context.Context, *ConvertToGrayscaleRequest) (*ConvertToGrayscaleResponse, error)
	mustEmbedUnimplementedImageProcessingServer()
}

// UnimplementedImageProcessingServer must be embedded to have forward compatible implementations.
type UnimplementedImageProcessingServer struct {
}

func (UnimplementedImageProcessingServer) ResizeImage(context.Context, *ResizeImageRequest) (*ResizeImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResizeImage not implemented")
}
func (UnimplementedImageProcessingServer) ConvertToGrayscale(context.Context, *ConvertToGrayscaleRequest) (*ConvertToGrayscaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertToGrayscale not implemented")
}
func (UnimplementedImageProcessingServer) mustEmbedUnimplementedImageProcessingServer() {}

// UnsafeImageProcessingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageProcessingServer will
// result in compilation errors.
type UnsafeImageProcessingServer interface {
	mustEmbedUnimplementedImageProcessingServer()
}

func RegisterImageProcessingServer(s grpc.ServiceRegistrar, srv ImageProcessingServer) {
	s.RegisterService(&ImageProcessing_ServiceDesc, srv)
}

func _ImageProcessing_ResizeImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizeImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).ResizeImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageProcessing_ResizeImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).ResizeImage(ctx, req.(*ResizeImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessing_ConvertToGrayscale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertToGrayscaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServer).ConvertToGrayscale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageProcessing_ConvertToGrayscale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServer).ConvertToGrayscale(ctx, req.(*ConvertToGrayscaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageProcessing_ServiceDesc is the grpc.ServiceDesc for ImageProcessing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageProcessing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "images.ImageProcessing",
	HandlerType: (*ImageProcessingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResizeImage",
			Handler:    _ImageProcessing_ResizeImage_Handler,
		},
		{
			MethodName: "ConvertToGrayscale",
			Handler:    _ImageProcessing_ConvertToGrayscale_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "images/images_service.proto",
}
